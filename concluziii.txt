1. Cum sunt apelați agenții ?
2. Care sunt criteriile de selecție pentru fiecare agent?
3. Care sunt tool-urile activate în fiecare etapă ?
4. Care sunt componentele arhitecturale?
5. Care este fluxul de comunicare între agenți ?

1. Cum sunt apelați agenții ?

Agentii sunt invocati exclusiv de catre coordinator_agent (care actioneaza ca un orchestrator) folosind Agent-as-Tool Pattern.

Initial am incercat folosirea a "built-in tools", dar gemini nu suporta folosirea si a unui "function call" si a unui "built-in tools"
in acelasi timp, asa ca ambii agenti sunt incapsulati ca si tooluri.

Agentul coordonator are in lista sa de tooluri instante ale clasei "AgentTool", fiecare instanta incapsuland cate un agent.

Cand agentul coordonator primeste o cerere, decide ce agent (instrument) sa foloseasca.

De exemplu, pentru o cerere de creare a unui email pe tema "Use of AI in education in 2025" el va decide sa apeleze research_agent pentru
a aduna informatii, iar mai apoi apeleaza writer_agent pentru a scrise emailul.

2. Care sunt criteriile de selecție pentru fiecare agent?

Criteriile de selectie sunt definite explicit in instructiunile (instruction) agentului coordinator_agent, in sectiunea DECISION CRITERIA:

research_agent este selectat atunci cand:
  Cererea utilizatorului implica un subiect nou sau de actualitate care necesita colectarea de informatii (fie de pe web, fie din fisierele locale). Acesta este intotdeauna primul pas intr-un flux de lucru standard.
  Utilizatorul solicita in mod explicit mai multe informatii sau o aprofundare a unui subiect.

writer_agent este selectat atunci cand:
  Etapa de cercetare s-a incheiat, iar coordinator_agent detine deja informatiile necesare pentru a crea continutul final (email, raport etc.).
  Utilizatorul solicita modificari sau ajustari ale unui text deja generat, fara a necesita informatii noi.

3. Care sunt tool-urile activate în fiecare etapă ?
Fluxul de lucru are mai multe etape, fiecare cu instrumentele sale specifice:

Etapa de Coordonare (gestionata de coordinator_agent):
  AgentTool(agent=research_agent): Instrumentul prin care se activeaza agentul de cercetare.
  AgentTool(agent=writer_agent): Instrumentul prin care se activeaza agentul de scriere.

Etapa de Cercetare (gestionata de research_agent):
Google Search: Pentru a cauta informatii pe internet.
MCPToolset: Un set de instrumente care comunica cu un server MCP local pentru a accesa sistemul de fisiere. Acesta ofera acces la functionalitati precum:
  list_directory: Pentru a lista fisierele din directorul test_research_files.
  read_file: Pentru a citi continutul unui fisier specific.

Etapa de Scriere (gestionata de writer_agent):
  Acest agent nu are instrumente externe activate. El se bazeaza exclusiv pe capacitatea modelului sau LLM (gemini-2.5-flash) de a procesa textul si informatiile primite de la coordinator pentru a genera continutul final.

4. Care sunt componentele arhitecturale?
Agenti Specializati:
  coordinator_agent: Agentul orchestrator, punctul de intrare pentru utilizator.
  research_agent: Agentul specializat in colectarea de date (web si local).
  writer_agent: Agentul specializat in generarea de continut scris.

Framework-ul ADK (Agent Development Kit)

Modelul LLM (Gemini 2.5 Flash): "Creierul" fiecarui agent, responsabil pentru intelegerea instructiunilor, luarea deciziilor si generarea de text.

Instrumente (Tools): Componente functionale pe care agentii le pot utiliza.

AgentTool: Componenta cheie pentru comunicarea A2A. O clasa ADK ce permite unui agent sa trateze un alt agent ca pe un instrument.

Google Search: Un instrument predefinit pentru cautari web.

MCPToolset: Un instrument ADK pentru integrarea cu servere externe care respecta Model Context Protocol.

Server MCP (Model Context Protocol): Un proces extern (npx @modelcontextprotocol/server-filesystem) pornit de ADK, 
care expune functionalitatile sistemului de fisiere local pentru research_agent.
